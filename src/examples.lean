import generalisation_linter
import algebra.associated
import algebra.char_p
import topology.metric_space.basic
import algebra.ring
import algebra.category.Group
import algebra.group_power
import algebra.algebra.basic

set_option pp.all false
#print  is_unit_iff_dvd_one

lemma atest (Œ± : Type*) [comm_monoid Œ±] : (1 : Œ±) * 1 = 1 ‚àß ‚àÄ a b : Œ±, a * b = b * a := ‚ü®mul_one _, mul_comm‚ü©
-- lemma atest' (Œ± : Type*) [comm_semigroup Œ±] [monoid Œ±] : (1 : Œ±) * 1 = 1 ‚àß ‚àÄ a b : Œ±, a * b = b * a := ‚ü®mul_one _, mul_comm‚ü©
lemma btest (Œ± : Type*) [ordered_ring Œ±] (a b : Œ±) : 0 ‚â§ 0 ‚àß a * b + b = a * b + b := ‚ü®eq.le rfl, rfl‚ü©
lemma btest' (Œ± : Type*) [ring Œ±] [preorder Œ±] (a b : Œ±) : 0 ‚â§ 0 ‚àß a * b + b = a * b + b := ‚ü®eq.le rfl, rfl‚ü©
variables (Œ± : Type*)
#print  atest
#print char_p.char_is_prime_of_two_le -- _inst_1: integral_domain ‚Üù no_zero_divisors semiring
-- should be domain?
#check preorder



--- only needs semiring and has neg doesn't matter what negative ints do.
theorem exists_int_gt' [linear_ordered_ring Œ±] [archimedean Œ±] (x : Œ±) : ‚àÉ n : ‚Ñ§, x < n :=
let ‚ü®n, h‚ü© := exists_nat_gt x in ‚ü®n, by rwa ‚Üê coe_coe‚ü©


@[simp] lemma mul_le_mul_right_of_neg' [linear_ordered_ring Œ±] {a b c : Œ±} (h : c < 0) : a * c ‚â§ b * c ‚Üî b ‚â§ a :=
‚ü®le_imp_le_of_lt_imp_lt $ Œª h', mul_lt_mul_of_neg_right h' h,
  Œª h', mul_le_mul_of_nonpos_right h' h.le‚ü©

section examples
section
  lemma good (G : Type*) [group G] (n : ‚Ñ§) (g : G) (h : g^(-n) = 1) : g^n = 1 :=
  begin
    rw [gpow_neg, inv_eq_one] at h,
    exact h,
  end

  lemma good2 (G : Type*) [add_monoid G] (n : ‚Ñï) (g : G) (h : n ‚Ä¢  g = 0) : (2*n)‚Ä¢  g = 0 :=
  by rw [mul_nsmul, h, nsmul_zero]

  -- monoid?
  lemma bad (G : Type*) [group G] (n : ‚Ñï) (g : G) (h : g^n = 1) : g^(2*n) = 1 :=
  by rw [pow_mul', h, one_pow]

  -- harder example as we have a diamond ?
  -- #check ring.to_distrib
  -- #check ring.to_semiring
  -- add_monoid
  lemma bad2diamond (G : Type*) [ring G] (n : ‚Ñï) (g : G) (h : n ‚Ä¢  g = 0) : (2*n)‚Ä¢  g = 0 :=
  by rw [mul_nsmul, h, nsmul_zero]

  -- statement generalises but proof does not!! this one is hard then
  -- add_monoid linter only finds semiring
  lemma bad3pfbad (G : Type*) [ring G] (n : ‚Ñï) (g : G) (h : n ‚Ä¢  g = 0) : (2*n)‚Ä¢  g = 0 :=
  by simp only [nsmul_eq_mul] at h; simp only [nat.cast_bit0, nsmul_eq_mul, nat.cast_one, nat.cast_mul]; assoc_rewrite h; exact mul_zero 2
  set_option pp.all true
  lemma bad3pfbad' (G : Type*) [ring G] (n : ‚Ñï) (g : G) (h : n ‚Ä¢ g = 0) : (2*n)‚Ä¢ g = 0 :=
  by {rw [nsmul_eq_mul] at ‚ä¢ h,  rw [nat.cast_mul, mul_assoc, h], exact mul_zero _}
set_option pp.max_steps 30000
set_option pp.max_depth 30000
set_option pp.goal.max_hypotheses 10000
-- #print nat.cast_coe
-- #print bad3pfbad'
set_option trace.generalising false
-- run_cmd do d ‚Üê get_decl `bad3pfbad',
--   cd ‚Üê dag_attr.get_cache,
--   e ‚Üê get_env,
--   trace $ find_gens' d cd e d.type d.value 0 "",
--   return ()

  -- add_monoid
  lemma bad4 (G : Type*) [add_comm_group G] (n : ‚Ñï) (g : G) (h : n ‚Ä¢ g = 0) : (2*n)‚Ä¢ g = 0 :=
  by rw [mul_nsmul, h, nsmul_zero]

  -- add_monoid
  lemma bad5 (G : Type*) [add_group G] (n : ‚Ñï) (g : G) (h : n ‚Ä¢ g = 0) : (2*n)‚Ä¢ g = 0 :=
  by rw [mul_nsmul, h, nsmul_zero]

  -- this works without the second stage checking the body, but it has a diamond if we include the type
  -- add_comm_semigroup
  lemma bad6 (G : Type*) [add_comm_group G] (g h : G) : g + h = h + g := add_comm _ _
  -- add_comm_semigroup
  lemma bad8 (G H : Type*) [add_comm_group G] (g h : G) : g + h = h + g := add_comm _ _

  -- TODO looks like some instance missed here with original version? possibly in the pi binder
  -- add_comm_semigroup
  lemma bad7pibinder (G : Type*) [add_comm_group G] (g h : G) : g + h = h + g ‚àß ‚àÄ g2, g2 + g = g + g2 :=
  ‚ü®add_comm _ _,assume g2, add_comm _ _ ‚ü©
  -- challenging example this is a projection but not an instance
  lemma bad10 (G H : Type*) [has_mul G] [has_mul H] [fintype G] [fintype H] (h : G ‚âÉ* H) :
  fintype.card G = fintype.card H := fintype.card_congr h.to_equiv
  -- multiple tings
  -- monoid H, fintypes not needed
  lemma bad9 (G H : Type*) [monoid G] [group H] [fintype G] [fintype H] : (1^2 : G) = 1 ‚àß (1^2 : H) = 1 :=
  ‚ü®one_pow 2, one_pow 2‚ü©

  -- group
  lemma bad11 (G : Type*) [comm_group G] (n : ‚Ñ§) (g : G) (h : g^(-n) = 1) : g^n = 1 :=
  begin
    rw [gpow_neg, inv_eq_one] at h,
    exact h,
  end
  -- set_option old_structure_cmd true
-- @[protect_proj] class linear_ordered_field' (Œ± : Type*) extends linear_ordered_comm_ring Œ±, field Œ±
  lemma bun (G: Group) (g :G) : g^2*g^2 = g^4 :=
  begin
    group,
  end
def eval {M N: Type*} [monoid M] [comm_monoid N] : M ‚Üí* (M ‚Üí* N) ‚Üí* N := (monoid_hom.id (M ‚Üí* N)).flip

-- #print eval
set_option trace.generalising false
-- run_cmd do d ‚Üê get_decl `eval,
--   cd ‚Üê dag_attr.get_cache,
--   e ‚Üê get_env,
--   trace $ find_gens' d cd e d.type d.value 0 "",
--   return ()
section
-- TODO
-- has_pow int and nat are different!
-- solutions: add to dag separately? or treat the instance chain as shorter
local attribute [semireducible] int.nonneg
lemma one_lt_fpow' {K}  [linear_ordered_field K] {p : K} (hp : 1 < p) :
  ‚àÄ z : ‚Ñ§, 0 < z ‚Üí 1 < p ^ z
| (n : ‚Ñï) h := by { rw [gpow_coe_nat],
    exact one_lt_pow hp (nat.succ_le_of_lt (int.lt_of_coe_nat_lt_coe_nat h)) }
#print one_lt_fpow'
#check expr.alpha_eqv
set_option trace.generalising false
open tactic
run_cmd do d ‚Üê get_decl `one_lt_fpow',
  cd ‚Üê dag_attr.get_cache,
  e ‚Üê get_env,
  -- trace $ find_gens' d cd e d.type d.value 0 "",
  d.type.mfold () (Œª e n _, do --trace (e.instantiate_nth_var 4 ((expr.var 0))),
                              trace (e.instantiate_vars (list.repeat (expr.var 0) e.get_free_var_range)), return ()),
  return ()
#eval tactic.trace `(‚àÄ l m t: ‚Ñï, (l < t ‚Üí l < t)).pi_binders
#check (`(‚àÄ l m t: ‚Ñï, (l < t ‚Üí 0 < t)) : expr).match_pi
set_option pp.all false
run_cmd (do
  let body :=  (`(‚àÄ m t: ‚Ñï, (t + m > 0)):expr).pi_binders.2,
  tactic.trace body,
  tactic.trace $ body.replace (Œª e n, match e with
  | expr.var n := some (expr.var 0)
  | e := none
  end),
  return () )
  end

open equiv.set equiv sum nat function set subtype

@[simp] lemma sum_diff_subset_apply_inr'
  {Œ±} {s t : set Œ±} (h : s ‚äÜ t) [decidable_pred (‚àà s)] (x : t \ s) :
  equiv.set.sum_diff_subset h (sum.inr x) = inclusion (diff_subset t s) x := rfl
  set_option pp.all false
  -- #check equiv.set.sum_diff_subset
  set_option pp.all true
  -- #print sum_diff_subset_apply_inr'

lemma supr_apply' {Œ± : Type*} {Œ≤ : Œ± ‚Üí Type*} {Œπ : Sort*} [Œ† i, has_Sup (Œ≤ i)] {f : Œπ ‚Üí Œ†a, Œ≤ a}
  {a : Œ±} :
  (‚®Üi, f i) a = (‚®Üi, f i a) :=
@infi_apply Œ± (Œª i, order_dual (Œ≤ i)) _ _ f a



variables {Œ≤ Œ≥ :Type} {Œπ : Sort} {s : set Œ±}
--none
theorem exists_nat_ge' [linear_ordered_semiring Œ±] [archimedean Œ±] (x : Œ±) :
  ‚àÉ n : ‚Ñï, x ‚â§ n :=
(exists_nat_gt x).imp $ Œª n, le_of_lt

theorem finset_le {r : Œ± ‚Üí Œ± ‚Üí Prop} [is_trans Œ± r]
  {Œπ} [hŒπ : nonempty Œπ] {f : Œπ ‚Üí Œ±} (D : directed r f) (s : finset Œπ) :
  ‚àÉ z, ‚àÄ i ‚àà s, r (f i) (f z) :=
show ‚àÉ z, ‚àÄ i ‚àà s.1, r (f i) (f z), from
multiset.induction_on s.1 (let ‚ü®z‚ü© := hŒπ in ‚ü®z, Œª _, false.elim‚ü©) $
Œª i s ‚ü®j, H‚ü©, let ‚ü®k, h‚ÇÅ, h‚ÇÇ‚ü© := D i j in
‚ü®k, Œª a h, or.cases_on (multiset.mem_cons.1 h)
  (Œª h, h.symm ‚ñ∏ h‚ÇÅ)
  (Œª h, trans (H _ h) h‚ÇÇ)‚ü©

lemma finite.bdd_below_bUnion [semilattice_inf Œ±] [nonempty Œ±] {I : set Œ≤} {S : Œ≤ ‚Üí set Œ±} (H : finite I) :
  (bdd_below (‚ãÉi‚ààI, S i)) ‚Üî (‚àÄi ‚àà I, bdd_below (S i)) :=
@finite.bdd_above_bUnion (order_dual Œ±) _ _ _ _ _ H


open filter
variables  {Œπ' : Type }
lemma unbounded_of_tendsto_at_top' [nonempty Œ±] [semilattice_inf Œ±] [preorder Œ≤] [no_top_order Œ≤]
  {f : Œ± ‚Üí Œ≤} (h : tendsto f at_bot at_top) :
  ¬¨ bdd_above (range f) :=
@unbounded_of_tendsto_at_top (order_dual Œ±) _ _ _ _ _ _ h

-- it looks like we only need has_pow here as has_pow is all that appears in the proof
-- however to_monoid and to_inv also appear in the statement, so should not show up
-- theorem gpow_neg_succ_of_nat' {G : Type } [group G] (a : G) (n : ‚Ñï) : a ^ -[1+n] = (a ^ n.succ)‚Åª¬π := rfl
-- #printgpow_neg_succ_of_nat

-- #print sum_diff_subset_apply_inr'

-- lemma char_p_iff_char_p' {K L : Type*} [division_ring K] [semiring L] [nontrivial L] (f : K ‚Üí+* L) (p : ‚Ñï) :

lemma ring_hom.char_p_iff_char_p' {K L : Type*} [field K] [field L] (f : K ‚Üí+* L) (p : ‚Ñï) :
  char_p K p ‚Üî char_p L p :=
begin
  split;
  { introI _c, constructor, intro n,
    rw [‚Üê @char_p.cast_eq_zero_iff _ _ _ p _c n, ‚Üê f.injective.eq_iff, f.map_nat_cast, f.map_zero] }
end
open nat subtype multiset

lemma piecewise_piecewise_of_subset_left' {Œ¥ : Œ± ‚Üí Sort*} (s : finset Œ±) (g f : Œ† (i : Œ±), Œ¥ i) [Œ† (j : Œ±), decidable (j ‚àà s)] {s t : finset Œ±} [Œ† i, decidable (i ‚àà s)]
  [Œ† i, decidable (i ‚àà t)] (h : s ‚äÜ t) (f‚ÇÅ f‚ÇÇ g : Œ† a, Œ¥ a) :
  s.piecewise (t.piecewise f‚ÇÅ f‚ÇÇ) g = s.piecewise f‚ÇÅ g :=
s.piecewise_congr (Œª i hi, finset.piecewise_eq_of_mem _ _ _ (h hi)) (Œª _ _, rfl)
-- #check       piecewise_piecewise_of_subset_left'

lemma sub_le_of_abs_sub_le_left' {c b a : Œ±} [linear_ordered_ring Œ±] (h : abs (a - b) ‚â§ c) : b - c ‚â§ a :=
_root_.sub_le.1 $ (abs_sub_le_iff.1 h).2

lemma inf_ind' [semilattice_inf Œ±] [is_total Œ± (‚â§)] (a b : Œ±) {p : Œ± ‚Üí Prop} (ha : p a) (hb : p b) : p (a ‚äì b) :=
@sup_ind (order_dual Œ±) _ _ _ _ _ ha hb
-- #print inf_ind --TODO why is inst_2 removed

open_locale filter
lemma map_at_bot_eq [nonempty Œ±] [semilattice_inf Œ±] {f : Œ± ‚Üí Œ≤} :
  at_bot.map f = (‚®Öa, ùìü $ f '' {a' | a' ‚â§ a}) :=
@map_at_top_eq (order_dual Œ±) _ _ _ _
#print map_at_bot_eq
open_locale big_operators
lemma abs_sum_le_sum_abs [linear_ordered_field Œ±] {f : Œ≤ ‚Üí Œ±} {s : finset Œ≤} :
  abs (‚àë x in s, f x) ‚â§ ‚àë x in s, abs (f x) :=
finset.le_sum_of_subadditive _ abs_zero abs_add s f

universes u v w
set_option pp.all true
lemma mem_orbit_self
{Œ± : Type u} {Œ≤ : Type v} [monoid Œ±] [mul_action Œ± Œ≤]
(b : Œ≤) : b ‚àà mul_action.orbit Œ± b :=
‚ü®1, mul_action.one_smul _‚ü©
--     #print mem_orbit_self
-- run_cmd do e ‚Üê get_env, cd ‚Üê class_dag e, l‚Üê e.get `mem_orbit_self,trace l.value.binding_body.binding_body.binding_body.binding_body
-- run_cmd do e ‚Üê get_env, cd ‚Üê class_dag e, l‚Üê e.get `mem_orbit_self, aa ‚Üê get_instance_chains `mul_action 0 l.value.binding_body.binding_body.binding_body.binding_body , trace $ cd.minimal_vertices aa --.lambda_body.app_fn.app_fn.app_arg.lambda_body.app_fn.app_arg.app_fn.lambda_body--find_gens' cd e l.type l.value 0 ""
  #print euclidean_domain.gcd

  #print algebra.of_module  --TODO
#print distrib.to_has_mul
#print mul_action.to_has_scalar
open tactic
run_cmd do d ‚Üê get_decl `algebra.of_module,
  cd ‚Üê dag_attr.get_cache,
  e ‚Üê get_env,
  trace $ find_gens' d cd e d.type d.value 0 "",
  return ()
run_cmd do e ‚Üê get_env,
cd ‚Üê class_dag e,
l‚Üê e.get `algebra.of_semimodule',
trace $ l.value.binding_body.binding_body.binding_body.binding_body.binding_body.binding_body.binding_body.app_fn.app_fn.app_fn.app_arg.app_arg,
-- aa ‚Üê is_instance_chain 2 l.value.binding_body.binding_body.binding_body.binding_body.binding_body.binding_body.binding_body.app_fn.app_fn.app_fn.app_arg.app_arg,
-- trace aa
aa ‚Üê get_instance_chains `semimodule 2 l.value.binding_body.binding_body.binding_body.binding_body.binding_body.binding_body.binding_body.app_fn.app_fn.app_fn.app_arg.app_arg,
trace aa,
trace $ cd.minimal_vertices aa --.lambda_body.app_fn.app_fn.app_arg.lambda_body.app_fn.app_arg.app_fn.lambda_body--find_gens' cd e l.type l.value 0 ""

  #print finset.prod_sum_elim /- _inst_2: decidable_eq ‚Üù
 -/
  end
end examples
