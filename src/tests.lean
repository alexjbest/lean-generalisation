import generalisation_linter
import algebra.associated
import topology.metric_space.basic
import algebra.ring
import algebra.category.Group
import algebra.group_power
import algebra.algebra.basic
import analysis.convex.integral
import measure_theory.integral.set_integral
import measure_theory.measure.finite_measure_weak_convergence

/-! Tests for generalisation linter, should produce test.expected.out -/
namespace lint_tests
section

  variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œ¥ : Type*}

  lemma is_unit.pow [monoid Œ±] {a : Œ±} (n : ‚Ñï) : is_unit a ‚Üí is_unit (a ^ n) :=
  Œª ‚ü®u, hu‚ü©, ‚ü®u ^ n, by simp *‚ü©

  theorem is_unit_iff_dvd_one [comm_monoid Œ±] {x : Œ±} : is_unit x ‚Üî x ‚à£ 1 :=
  ‚ü®by rintro ‚ü®u, rfl‚ü©; exact ‚ü®_, u.mul_inv.symm‚ü©,
  Œª ‚ü®y, h‚ü©, ‚ü®‚ü®x, y, h.symm, by rw [h, mul_comm]‚ü©, rfl‚ü©‚ü©

end
section
theorem one_lt_bit1 {Œ± : Type*} [linear_ordered_semiring Œ±] {a : Œ±} [nontrivial Œ±] :
(1 : Œ±) < bit1 a ‚Üî 0 < a :=
by rw [bit1, lt_add_iff_pos_left, bit0, ‚Üê two_mul, zero_lt_mul_left (zero_lt_two : 0 < (2:Œ±))]
-- set_option pp.all true
-- #print  one_lt_bit1

end

section

  lemma atest (Œ± : Type*) [comm_monoid Œ±] : (1 : Œ±) * 1 = 1 ‚àß ‚àÄ a b : Œ±, a * b = b * a := ‚ü®mul_one _, mul_comm‚ü©
  lemma btest (Œ± : Type*) [ordered_ring Œ±] (a b : Œ±) : (0 : Œ±) ‚â§ 0 ‚àß a * b + b = a * b + b := ‚ü®eq.le rfl, rfl‚ü©
  lemma btest' (Œ± : Type*) [has_add Œ±] [has_mul Œ±] [has_zero Œ±] [preorder Œ±] (a b : Œ±) : (0 : Œ±) ‚â§ 0 ‚àß a * b + b = a * b + b := ‚ü®eq.le rfl, rfl‚ü©

end
section

  universe u
  variables (Œ± : Type u) [integral_domain Œ±]

  open char_p nat
  theorem char_ne_one (p : ‚Ñï) [hc : char_p Œ± p] : p ‚â† 1 :=
  assume hp : p = 1,
  have (1 : Œ±) = 0, by simpa using (cast_eq_zero_iff Œ± p 1).mpr (hp ‚ñ∏ dvd_refl p),
  absurd this one_ne_zero

  theorem char_is_prime_of_two_le (p : ‚Ñï) [hc : char_p Œ± p] (hp : 2 ‚â§ p) : nat.prime p :=
  suffices ‚àÄd ‚à£ p, d = 1 ‚à® d = p, from ‚ü®hp, this‚ü©,
  assume (d : ‚Ñï) (hdvd : ‚àÉ e, p = d * e),
  let ‚ü®e, hmul‚ü© := hdvd in
  have (p : Œ±) = 0, from (cast_eq_zero_iff Œ± p p).mpr (dvd_refl p),
  have (d : Œ±) * e = 0, from (@cast_mul Œ± _ d e) ‚ñ∏ (hmul ‚ñ∏ this),
  or.elim (eq_zero_or_eq_zero_of_mul_eq_zero this)
    (assume hd : (d : Œ±) = 0,
    have p ‚à£ d, from (cast_eq_zero_iff Œ± p d).mp hd,
    show d = 1 ‚à® d = p, from or.inr (dvd_antisymm ‚ü®e, hmul‚ü© this))
    (assume he : (e : Œ±) = 0,
    have p ‚à£ e, from (cast_eq_zero_iff Œ± p e).mp he,
    have e ‚à£ p, from dvd_of_mul_left_eq d (eq.symm hmul),
    have e = p, from dvd_antisymm ‚Äπe ‚à£ p‚Ä∫ ‚Äπp ‚à£ e‚Ä∫,
    have h‚ÇÄ : p > 0, from gt_of_ge_of_gt hp (nat.zero_lt_succ 1),
    have d * p = 1 * p, by rw ‚Äπe = p‚Ä∫ at hmul; rw [one_mul]; exact eq.symm hmul,
    show d = 1 ‚à® d = p, from or.inl (eq_of_mul_eq_mul_right h‚ÇÄ this))

end
section

open measure_theory set filter
open_locale topological_space big_operators

variables {Œ± E : Type*} [measurable_space Œ±] {Œº : measure Œ±}
  [normed_group E] [normed_space ‚Ñù E] [complete_space E]
  [topological_space.second_countable_topology E] [measurable_space E] [borel_space E]


private lemma convex.smul_integral_mem_of_measurable
  [is_finite_measure Œº] {s : set E} (hs : convex ‚Ñù s) (hsc : is_closed s)
  (hŒº : Œº ‚â† 0) {f : Œ± ‚Üí E} (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : integrable f Œº) (hfm : measurable f) :
  (Œº univ).to_real‚Åª¬π ‚Ä¢ ‚à´ x, f x ‚àÇŒº ‚àà s :=
begin
  unfreezingI { rcases eq_empty_or_nonempty s with rfl|‚ü®y‚ÇÄ, h‚ÇÄ‚ü© },
  { refine (hŒº _).elim, simpa using hfs },
  rw ‚Üê hsc.closure_eq at hfs,
  have hc : integrable (Œª _, y‚ÇÄ) Œº := integrable_const _,
  set F : ‚Ñï ‚Üí simple_func Œ± E := simple_func.approx_on f hfm s y‚ÇÄ h‚ÇÄ,
  have : tendsto (Œª n, (F n).integral Œº) at_top (ùìù $ ‚à´ x, f x ‚àÇŒº),
  { simp only [simple_func.integral_eq_integral _
      (simple_func.integrable_approx_on hfm hfi h‚ÇÄ hc _)],
    exact tendsto_integral_of_L1 _ hfi
      (eventually_of_forall $ simple_func.integrable_approx_on hfm hfi h‚ÇÄ hc)
      (simple_func.tendsto_approx_on_L1_nnnorm hfm h‚ÇÄ hfs (hfi.sub hc).2) },
  refine hsc.mem_of_tendsto (tendsto_const_nhds.smul this) (eventually_of_forall $ Œª n, _),
  have : ‚àë y in (F n).range, (Œº ((F n) ‚Åª¬π' {y})).to_real = (Œº univ).to_real,
    by rw [‚Üê (F n).sum_range_measure_preimage_singleton, @ennreal.to_real_sum _ _
      (Œª y, Œº ((F n) ‚Åª¬π' {y})) (Œª _ _, (measure_ne_top _ _))],
  rw [‚Üê this, simple_func.integral],
  refine hs.center_mass_mem (Œª _ _, ennreal.to_real_nonneg) _ _,
  { rw [this, ennreal.to_real_pos_iff, pos_iff_ne_zero, ne.def, measure.measure_univ_eq_zero],
    exact ‚ü®hŒº, measure_ne_top _ _‚ü© },
  { simp only [simple_func.mem_range],
    rintros _ ‚ü®x, rfl‚ü©,
    exact simple_func.approx_on_mem hfm h‚ÇÄ n x }
end

/-- If `Œº` is a non-zero finite measure on `Œ±`, `s` is a convex closed set in `E`, and `f` is an
integrable function sending `Œº`-a.e. points to `s`, then the average value of `f` belongs to `s`:
`(Œº univ).to_real‚Åª¬π ‚Ä¢ ‚à´ x, f x ‚àÇŒº ‚àà s`. See also `convex.center_mass_mem` for a finite sum version
of this lemma. -/
lemma convex.smul_integral_mem
  [is_finite_measure Œº] {s : set E} (hs : convex ‚Ñù s) (hsc : is_closed s)
  (hŒº : Œº ‚â† 0) {f : Œ± ‚Üí E} (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : integrable f Œº) :
  (Œº univ).to_real‚Åª¬π ‚Ä¢ ‚à´ x, f x ‚àÇŒº ‚àà s :=
begin
  have : ‚àÄ·µê (x : Œ±) ‚àÇŒº, hfi.ae_measurable.mk f x ‚àà s,
  { filter_upwards [hfs, hfi.ae_measurable.ae_eq_mk],
    assume a ha h,
    rwa ‚Üê h },
  convert convex.smul_integral_mem_of_measurable hs hsc hŒº this
    (hfi.congr hfi.ae_measurable.ae_eq_mk) (hfi.ae_measurable.measurable_mk) using 2,
  apply integral_congr_ae,
  exact hfi.ae_measurable.ae_eq_mk
end

end

section

  variables {Œ± : Type*} [linear_ordered_ring Œ±] [archimedean Œ±]

  lemma pow_unbounded_of_one_lt (x : Œ±) {y : Œ±} (hy1 : 1 < y) :
    ‚àÉ n : ‚Ñï, x < y ^ n :=
  sub_add_cancel y 1 ‚ñ∏ add_one_pow_unbounded_of_pos _ (sub_pos.2 hy1)

  /-- Every x greater than or equal to 1 is between two successive
  natural-number powers of every y greater than one. -/
  lemma exists_nat_pow_near {x : Œ±} {y : Œ±} (hx : 1 ‚â§ x) (hy : 1 < y) :
    ‚àÉ n : ‚Ñï, y ^ n ‚â§ x ‚àß x < y ^ (n + 1) :=
  have h : ‚àÉ n : ‚Ñï, x < y ^ n, from pow_unbounded_of_one_lt _ hy,
  by classical; exact let n := nat.find h in
    have hn  : x < y ^ n, from nat.find_spec h,
    have hnp : 0 < n,     from pos_iff_ne_zero.2 (Œª hn0,
      by rw [hn0, pow_zero] at hn; exact (not_le_of_gt hn hx)),
    have hnsp : nat.pred n + 1 = n,     from nat.succ_pred_eq_of_pos hnp,
    have hltn : nat.pred n < n,         from nat.pred_lt (ne_of_gt hnp),
    ‚ü®nat.pred n, le_of_not_lt (nat.find_min h hltn), by rwa hnsp‚ü©

  theorem exists_int_gt (x : Œ±) : ‚àÉ n : ‚Ñ§, x < n :=
  let ‚ü®n, h‚ü© := exists_nat_gt x in ‚ü®n, by rwa ‚Üê coe_coe‚ü©
  --- only needs semiring and has neg doesn't matter what negative ints do.

end

section
  variables {Œ± : Type*} [linear_ordered_ring Œ±] {a b c : Œ±}

  @[simp] lemma mul_le_mul_right_of_neg {a b c : Œ±} (h : c < 0) : a * c ‚â§ b * c ‚Üî b ‚â§ a :=
  ‚ü®le_imp_le_of_lt_imp_lt $ Œª h', mul_lt_mul_of_neg_right h' h,
    Œª h', mul_le_mul_of_nonpos_right h' h.le‚ü©

end

section
  lemma good (G : Type*) [group G] (n : ‚Ñ§) (g : G) (h : g^(-n) = 1) : g^n = 1 :=
  begin
    rw [gpow_neg, inv_eq_one] at h,
    exact h,
  end

  lemma good2 (G : Type*) [add_monoid G] (n : ‚Ñï) (g : G) (h : n ‚Ä¢  g = 0) : (2*n)‚Ä¢  g = 0 :=
  by rw [mul_nsmul, h, nsmul_zero]

--   -- monoid?
  lemma bad (G : Type*) [group G] (n : ‚Ñï) (g : G) (h : g^n = 1) : g^(2*n) = 1 :=
  by rw [pow_mul', h, one_pow]

  -- add_monoid
  lemma bad2diamond (G : Type*) [ring G] (n : ‚Ñï) (g : G) (h : n ‚Ä¢  g = 0) : (2*n)‚Ä¢  g = 0 :=
  by rw [mul_nsmul, h, nsmul_zero]

  -- statement generalises but proof does not!! this one is hard then, beyond current scope to complete
  -- add_monoid linter only finds semiring
  lemma bad3pfbad (G : Type*) [ring G] (n : ‚Ñï) (g : G) (h : n ‚Ä¢  g = 0) : (2*n)‚Ä¢  g = 0 :=
  by simp only [nsmul_eq_mul] at h; simp only [nat.cast_bit0, nsmul_eq_mul, nat.cast_one, nat.cast_mul]; assoc_rewrite h; exact mul_zero 2

  lemma bad3 (G : Type*) [ring G] (n : ‚Ñï) (g : G) (h : n ‚Ä¢  g = 0) : (2*n)‚Ä¢  g = 0 :=
  by {rw [mul_nsmul, h], exact nsmul_zero _}

  -- add_monoid
  lemma bad4 (G : Type*) [add_comm_group G] (n : ‚Ñï) (g : G) (h : n ‚Ä¢  g = 0) : (2*n)‚Ä¢  g = 0 :=
  by rw [mul_nsmul, h, nsmul_zero]

  -- add_monoid
  lemma bad5 (G : Type*) [add_group G] (n : ‚Ñï) (g : G) (h : n ‚Ä¢  g = 0) : (2*n)‚Ä¢  g = 0 :=
  by rw [mul_nsmul, h, nsmul_zero]

  -- add_comm_semigroup
  lemma bad6 (G : Type*) [add_comm_group G] (g h : G) : g + h = h + g := add_comm _ _

  -- add_comm_semigroup
  lemma bad8 (G H : Type*) [add_comm_group G] (g h : G) : g + h = h + g := add_comm _ _

  -- add_comm_semigroup
  lemma bad7pibinder (G : Type*) [add_comm_group G] (g h : G) : g + h = h + g ‚àß ‚àÄ g2, g2 + g = g + g2 :=
  ‚ü®add_comm _ _,assume g2, add_comm _ _ ‚ü©

  -- this example this is not an instance or even a tc
  lemma bad10 (G H : Type*) [has_mul G] [has_mul H] [fintype G] [fintype H] (h : G ‚âÉ* H) :
  fintype.card G = fintype.card H := fintype.card_congr h.to_equiv

  -- multiple tings
  -- monoid H, fintypes not needed
  lemma bad9 (G H : Type*) [monoid G] [group H] [fintype G] [fintype H] : (1^2 : G) = 1 ‚àß (1^2 : H) = 1 :=
  ‚ü®one_pow 2, one_pow 2‚ü©

  -- group
  lemma bad11 (G : Type*) [comm_group G] (n : ‚Ñ§) (g : G) (h : g^(-n) = 1) : g^n = 1 :=
  begin
    rw [gpow_neg, inv_eq_one] at h,
    exact h,
  end

  -- bundled examples do nothing
  lemma bun (G : Group) (g : G) : g^2*g^2 = g^4 :=
  begin
    group,
  end

end

section
  def eval {M N : Type*} [monoid M] [comm_monoid N] : M ‚Üí* (M ‚Üí* N) ‚Üí* N := (monoid_hom.id (M ‚Üí* N)).flip
end

section
  local attribute [semireducible] int.nonneg
lemma one_lt_fpow {K}  [linear_ordered_field K] {p : K} (hp : 1 < p) :
  ‚àÄ z : ‚Ñ§, 0 < z ‚Üí 1 < p ^ z
| (n : ‚Ñï) h := by { rw [gpow_coe_nat],
    exact one_lt_pow hp (nat.succ_le_of_lt (int.lt_of_coe_nat_lt_coe_nat h)) }
end

section

  open equiv.set equiv sum nat function set subtype

  @[simp] lemma sum_diff_subset_apply_inr
    {Œ±} {s t : set Œ±} (h : s ‚äÜ t) [decidable_pred (‚àà s)] (x : t \ s) :
    equiv.set.sum_diff_subset h (sum.inr x) = inclusion (diff_subset t s) x := rfl

  lemma supr_apply {Œ± : Type*} {Œ≤ : Œ± ‚Üí Type*} {Œπ : Sort*} [Œ† i, has_Sup (Œ≤ i)] {f : Œπ ‚Üí Œ†a, Œ≤ a}
    {a : Œ±} :
    (‚®Üi, f i) a = (‚®Üi, f i a) :=
  @infi_apply Œ± (Œª i, order_dual (Œ≤ i)) _ _ f a

end

section

  variables {Œ± Œ≤ Œ≥ :Type} {Œπ : Sort} {s : set Œ±}
  --none
  theorem exists_nat_ge [linear_ordered_semiring Œ±] [archimedean Œ±] (x : Œ±) :
    ‚àÉ n : ‚Ñï, x ‚â§ n :=
  (exists_nat_gt x).imp $ Œª n, le_of_lt

  theorem finset_le {r : Œ± ‚Üí Œ± ‚Üí Prop} [is_trans Œ± r]
    {Œπ} [hŒπ : nonempty Œπ] {f : Œπ ‚Üí Œ±} (D : directed r f) (s : finset Œπ) :
    ‚àÉ z, ‚àÄ i ‚àà s, r (f i) (f z) :=
  show ‚àÉ z, ‚àÄ i ‚àà s.1, r (f i) (f z), from
  multiset.induction_on s.1 (let ‚ü®z‚ü© := hŒπ in ‚ü®z, Œª _, false.elim‚ü©) $
  Œª i s ‚ü®j, H‚ü©, let ‚ü®k, h‚ÇÅ, h‚ÇÇ‚ü© := D i j in
  ‚ü®k, Œª a h, or.cases_on (multiset.mem_cons.1 h)
    (Œª h, h.symm ‚ñ∏ h‚ÇÅ)
    (Œª h, trans (H _ h) h‚ÇÇ)‚ü©
end

section
  variables {Œ± Œ≤ :Type}
  open set
  lemma finite.bdd_below_bUnion [semilattice_inf Œ±] [nonempty Œ±] {I : set Œ≤} {S : Œ≤ ‚Üí set Œ±} (H : finite I) :
    (bdd_below (‚ãÉi‚ààI, S i)) ‚Üî (‚àÄi ‚àà I, bdd_below (S i)) :=
  @finite.bdd_above_bUnion (order_dual Œ±) _ _ _ _ _ H
end

section

  open filter set
  variables {Œ± Œ≤ :Type}
  variables  {Œπ' : Type}
  lemma unbounded_of_tendsto_at_top [nonempty Œ±] [semilattice_inf Œ±] [preorder Œ≤] [no_top_order Œ≤]
    {f : Œ± ‚Üí Œ≤} (h : tendsto f at_bot at_top) :
    ¬¨ bdd_above (range f) :=
  @unbounded_of_tendsto_at_top (order_dual Œ±) _ _ _ _ _ _ h

end

section
  -- it looks like we only need has_pow here as has_pow is all that appears in the proof
  -- however to_monoid and to_inv also appear in the statement, so should not show up
  -- theorem gpow_neg_succ_of_nat {G : Type } [group G] (a : G) (n : ‚Ñï) : a ^ -[1+n] = (a ^ n.succ)‚Åª¬π := rfl
  -- set_option pp.all true
  -- #print gpow_neg_succ_of_nat
end

section
lemma char_p_iff_char_p {K L : Type*} [field K] [field L] (f : K ‚Üí+* L) (p : ‚Ñï) :
  char_p K p ‚Üî char_p L p :=
begin
  split;
  { introI _c, constructor, intro n,
    rw [‚Üê @char_p.cast_eq_zero_iff _ _ _ p _c n, ‚Üê f.injective.eq_iff, f.map_nat_cast, f.map_zero] }
end

section
  open nat subtype multiset
  variables {Œ± Œ≤ :Type}

  lemma piecewise_piecewise_of_subset_left {Œ¥ : Œ± ‚Üí Sort*} (s : finset Œ±) (g f : Œ† (i : Œ±), Œ¥ i) [Œ† (j : Œ±), decidable (j ‚àà s)] {s t : finset Œ±} [Œ† i, decidable (i ‚àà s)]
    [Œ† i, decidable (i ‚àà t)] (h : s ‚äÜ t) (f‚ÇÅ f‚ÇÇ g : Œ† a, Œ¥ a) :
    s.piecewise (t.piecewise f‚ÇÅ f‚ÇÇ) g = s.piecewise f‚ÇÅ g :=
  s.piecewise_congr (Œª i hi, finset.piecewise_eq_of_mem _ _ _ (h hi)) (Œª _ _, rfl)

end

section
  variables {Œ± Œ≤ :Type}

  lemma sub_le_of_abs_sub_le_left {c b a : Œ±} [linear_ordered_ring Œ±] (h : abs (a - b) ‚â§ c) : b - c ‚â§ a :=
  if hz : 0 ‚â§ a - b then
    (calc
        a ‚â• b     : le_of_sub_nonneg hz
      ... ‚â• b - c : sub_le_self _ $ (abs_nonneg _).trans h)
  else
    have habs : b - a ‚â§ c, by rwa [abs_of_neg (lt_of_not_ge hz), neg_sub] at h,
    have habs' : b ‚â§ c + a, from sub_le_iff_le_add.mp habs,
    sub_le.mp habs

end

section
  variables {Œ± Œ≤ :Type}
  lemma inf_ind [semilattice_inf Œ±] [is_total Œ± (‚â§)] (a b : Œ±) {p : Œ± ‚Üí Prop} (ha : p a) (hb : p b) : p (a ‚äì b) :=
  @sup_ind (order_dual Œ±) _ _ _ _ _ ha hb
end

section
  variables {Œ± Œ≤ :Type}

  open filter
  open_locale filter
  lemma map_at_bot_eq [nonempty Œ±] [semilattice_inf Œ±] {f : Œ± ‚Üí Œ≤} :
    at_bot.map f = (‚®Öa, ùìü $ f '' {a' | a' ‚â§ a}) :=
  @map_at_top_eq (order_dual Œ±) _ _ _ _

end

section
  variables {Œ± Œ≤ : Type}
  open_locale big_operators
  lemma abs_sum_le_sum_abs [linear_ordered_field Œ±] {f : Œ≤ ‚Üí Œ±} {s : finset Œ≤} :
    abs (‚àë x in s, f x) ‚â§ ‚àë x in s, abs (f x) :=
  finset.le_sum_of_subadditive _ abs_zero abs_add s f
end

section
  universes u v w

  lemma mem_orbit_self
  {Œ± : Type u} {Œ≤ : Type v} [monoid Œ±] [mul_action Œ± Œ≤]
  (b : Œ≤) : b ‚àà mul_action.orbit Œ± b :=
  ‚ü®1, mul_action.one_smul _‚ü©
end

section
  variable {R : Type}
  variables [euclidean_domain R]
  variable [decidable_eq R]
  open euclidean_domain

  /-- `gcd a b` is a (non-unique) element such that `gcd a b ‚à£ a` `gcd a b ‚à£ b`, and for
    any element `c` such that `c ‚à£ a` and `c ‚à£ b`, then `c ‚à£ gcd a b` -/
  def gcd : R ‚Üí R ‚Üí R
  | a := Œª b, if a0 : a = 0 then b else
    have h:_ := mod_lt b a0,
    gcd (b%a) a
  using_well_founded {dec_tac := tactic.assumption,
    rel_tac := Œª _ _, `[exact ‚ü®_, r_well_founded‚ü©]}

end

section
  universes u v w
  open algebra
  variables {R : Type u} {S : Type v} {A : Type w} {B : Type*}

/-- Let `R` be a commutative semiring, let `A` be a semiring with a `module R` structure.
If `(r ‚Ä¢ 1) * x = x * (r ‚Ä¢ 1) = r ‚Ä¢ x` for all `r : R` and `x : A`, then `A` is an `algebra`
over `R`. -/
def of_module' [comm_semiring R] [semiring A] [module R A]
  (h‚ÇÅ : ‚àÄ (r : R) (x : A), (r ‚Ä¢ 1) * x = r ‚Ä¢ x)
  (h‚ÇÇ : ‚àÄ (r : R) (x : A), x * (r ‚Ä¢ 1) = r ‚Ä¢ x) : algebra R A :=
{ to_fun := Œª r, r ‚Ä¢ 1,
  map_one' := one_smul _ _,
  map_mul' := Œª r‚ÇÅ r‚ÇÇ, by rw [h‚ÇÅ, mul_smul],
  map_zero' := zero_smul _ _,
  map_add' := Œª r‚ÇÅ r‚ÇÇ, add_smul r‚ÇÅ r‚ÇÇ 1,
  commutes' := Œª r x, by simp only [h‚ÇÅ, h‚ÇÇ],
  smul_def' := Œª r x, by simp only [h‚ÇÅ] }

/-- Let `R` be a commutative semiring, let `A` be a semiring with a `module R` structure.
If `(r ‚Ä¢ x) * y = x * (r ‚Ä¢ y) = r ‚Ä¢ (x * y)` for all `r : R` and `x y : A`, then `A`
is an `algebra` over `R`. -/
def of_module [comm_semiring R] [semiring A] [module R A]
  (h‚ÇÅ : ‚àÄ (r : R) (x y : A), (r ‚Ä¢ x) * y = r ‚Ä¢ (x * y))
  (h‚ÇÇ : ‚àÄ (r : R) (x y : A), x * (r ‚Ä¢ y) = r ‚Ä¢ (x * y)) : algebra R A :=
of_module' (Œª r x, by rw [h‚ÇÅ, one_mul]) (Œª r x, by rw [h‚ÇÇ, mul_one])

end

section
  /- _inst_2: decidable_eq ‚Üù -/

  open_locale big_operators
  open finset
  variables {Œ± Œ≤ Œ≥ : Type}
  variables [comm_monoid Œ≤]
  @[simp, to_additive]
  lemma prod_sum_elim [decidable_eq (Œ± ‚äï Œ≥)]
    (s : finset Œ±) (t : finset Œ≥) (f : Œ± ‚Üí Œ≤) (g : Œ≥ ‚Üí Œ≤) :
    ‚àè x in s.image sum.inl ‚à™ t.image sum.inr, sum.elim f g x = (‚àè x in s, f x) * (‚àè x in t, g x) :=
  begin
    rw [prod_union, prod_image, prod_image],
    { simp only [sum.elim_inl, sum.elim_inr] },
    { exact Œª _ _ _ _, sum.inr.inj },
    { exact Œª _ _ _ _, sum.inl.inj },
    { rintros i hi,
      erw [finset.mem_inter, finset.mem_image, finset.mem_image] at hi,
      rcases hi with ‚ü®‚ü®i, hi, rfl‚ü©, ‚ü®j, hj, H‚ü©‚ü©,
      cases H }
  end
end
section

  variables {Œ± Œ≤ : Type} {s s‚ÇÅ s‚ÇÇ : finset Œ±} {a : Œ±} {b : Œ≤} {f g : Œ± ‚Üí Œ≤} [semiring Œ≤]
  open_locale big_operators
  open function

  -- odd one the linter wants to assume add_comm_monoid has_mul and is_add_monoid_hom mul
  -- this is weaker than semiring indeed as no mul identity needed
  -- Update: mathlib now has non-unital non-assoc semi so does that
lemma sum_mul : (‚àë x in s, f x) * b = ‚àë x in s, f x * b :=
add_monoid_hom.map_sum (add_monoid_hom.mul_right b) _ s
--   lemma sum_mul : (‚àë x in s, f x) * b = ‚àë x in s, f x * b :=
-- add_monoid_hom.map_sum (add_monoid_hom.mul_right b) _ s
  -- (s.sum_hom (Œª x, x * b)).symm
  open tactic
  set_option trace.generalising true
  set_option pp.all true
run_cmd do e ‚Üê get_env, cd ‚Üê class_dag e, l‚Üê e.get `lint_tests.sum_mul, trace $ find_gens' l cd cd.topological_sort cd.reachable_table e l.type l.value 0 ""
end

section
  universes u v
  variables {Œ± : Type u} {Œ≤ : Type v} [topological_space Œ±]
  lemma is_closed_singleton [t2_space Œ±] {x : Œ±} : is_closed ({x} : set Œ±) :=
  t1_space.t1 x

end

section

class foo (X : Type) :=
(f : X ‚Üí X)
class bar (X : Type) extends foo X :=
(h : f ‚àò f = f)
end

section

lemma aa (X : Type) [bar X] : (foo.f : X ‚Üí X) = foo.f := rfl

lemma mn_tors_of_n_tors {X : Type*} [semiring X] (m n : ‚Ñï) (x : X) (h : n ‚Ä¢  x = 0) :
  (m * n) ‚Ä¢  x = 0 := by rw [mul_nsmul, h, nsmul_zero]
end
end

-- set_option profiler true

#lint only generalisation_linter
end lint_tests
